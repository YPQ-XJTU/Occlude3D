# ------------------------------------------------------------------------
# Deformable DETR
# Copyright (c) 2020 SenseTime. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 [see LICENSE for details]
# ------------------------------------------------------------------------
# Modified from DETR (https://github.com/facebookresearch/detr)
# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved
# ------------------------------------------------------------------------

"""
Backbone modules.
"""
from collections import OrderedDict

import torch
import torch.nn.functional as F
import torchvision
from torch import nn
from torchvision.models._utils import IntermediateLayerGetter
from typing import Dict, List
import numpy as np
from utils.misc import NestedTensor, is_main_process

from .position_encoding import build_position_encoding

from .backbones.dla import dla34
from  .backbones.dlaup import DLAUp

class FrozenBatchNorm2d(torch.nn.Module):
    """
    BatchNorm2d where the batch statistics and the affine parameters are fixed.

    Copy-paste from torchvision.misc.ops with added eps before rqsrt,
    without which any other models than torchvision.models.resnet[18,34,50,101]
    produce nans.
    """

    def __init__(self, n, eps=1e-5):
        super(FrozenBatchNorm2d, self).__init__()
        self.register_buffer("weight", torch.ones(n))
        self.register_buffer("bias", torch.zeros(n))
        self.register_buffer("running_mean", torch.zeros(n))
        self.register_buffer("running_var", torch.ones(n))
        self.eps = eps

    def _load_from_state_dict(self, state_dict, prefix, local_metadata, strict,
                              missing_keys, unexpected_keys, error_msgs):
        num_batches_tracked_key = prefix + 'num_batches_tracked'
        if num_batches_tracked_key in state_dict:
            del state_dict[num_batches_tracked_key]

        super(FrozenBatchNorm2d, self)._load_from_state_dict(
            state_dict, prefix, local_metadata, strict,
            missing_keys, unexpected_keys, error_msgs)

    def forward(self, x):
        # move reshapes to the beginning
        # to make it fuser-friendly
        w = self.weight.reshape(1, -1, 1, 1)
        b = self.bias.reshape(1, -1, 1, 1)
        rv = self.running_var.reshape(1, -1, 1, 1)
        rm = self.running_mean.reshape(1, -1, 1, 1)
        eps = self.eps
        scale = w * (rv + eps).rsqrt()
        bias = b - rm * scale
        return x * scale + bias


class Backbone(nn.Module):
    def __init__(self, backbone='dla34', neck='DLAUp', downsample=4):
        assert downsample in [4, 8, 16, 32]
        super().__init__()

        self.backbone = globals()[backbone](pretrained=True, return_levels=True)
        self.head_conv = 256  # default setting for head conv
        self.channels = self.backbone.channels  # channels list for feature maps generated by backbone

        self.first_level = int(np.log2(downsample))
        scales = [2 ** i for i in range(len(self.channels[self.first_level:]))]
        self.feat_up = globals()[neck](self.channels[self.first_level:], scales_list=scales)

    def forward(self, input):
        #backbone获取Feature
        feat = self.backbone(input)
        #neck获得deep Feature
        feat = self.feat_up(feat[self.first_level:])
        # out = {}
        m = torch.zeros(feat.shape[0], feat.shape[2], feat.shape[3]).to(torch.bool).to(feat.device)
        out = NestedTensor(feat, m)

        return out

class Joiner(nn.Sequential):
    def __init__(self, backbone, position_embedding):
        super().__init__(backbone, position_embedding)
        self.num_channels = backbone.channels

    def forward(self, images):
        outputs = self[0](images)

        out: List[NestedTensor] = []
        pos = []

        out.append(outputs)


        # position encoding
        pos.append(self[1](outputs.to(outputs.tensors.dtype)))

        return out, pos


def build_backbone(cfg):
    
    position_embedding = build_position_encoding(cfg)
    backbone = Backbone(cfg['backbone'], cfg['neck'], cfg['downsample'])
    model = Joiner(backbone, position_embedding)
    return model
